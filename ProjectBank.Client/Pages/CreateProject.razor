@page "/projectCreation"
@inject HttpClient _http
@inject NavigationManager _navigationManager

<PageTitle>Create Project</PageTitle>

<h1 style="margin-bottom: 48px">Create Project</h1>

<RadzenTemplateForm TItem="ProjectCreateDTO" Data="@_project" Submit="@OnSubmit" InvalidSubmit="OnInvalidSubmit" id="@_submitFormId">
    <div class="row" style="margin-bottom: 48px">
        <div class="col-md-2 align-right">
            <RadzenLabel class="formLabelTextCreateProject" Text="Name"/>
        </div>
        <div class="col">
            <RadzenTextBox style="display: block; width: 50%;" Name="ProjectName" @bind-Value="@_project.Name"/>
            <RadzenRequiredValidator Component="ProjectName" Text="Project name is required"/>
        </div>
    </div>
    <div class="row" style="margin-bottom: 48px">
        <div class="col-md-2 align-right">
            <RadzenLabel class="formLabelTextCreateProject" Text="Description"/>
        </div>
        <div class="col">
            <RadzenTextArea style="display: block; width: 50%; height: 100px" Name="ProjectDescription" @bind-Value="@_project.Description"></RadzenTextArea>
            <RadzenRequiredValidator Component="ProjectDescription" Text="Description is required"/>
        </div>
    </div>
    <div class="row supervisors" style="margin-bottom: 48px">
        <div class="col-md-2">
            <RadzenLabel class="formLabelTextCreateProject" Text="Co-Supervisors"/>
        </div>
        <div class="col">
            <RadzenListBox class="tagDropDown"
                @bind-Value="@SelectedSupervisorIds"
                AllowFiltering="true"
                Multiple="true"
                Data="@Supervisors"
                TextProperty="Name"
                ValueProperty="Id"/>
        </div>
    </div>
</RadzenTemplateForm>
<div>
    @if (!TagGroups.Any())
    {
        <div class="row" style="margin-bottom: 48px">
            <div class="col-md-2 align-right">
                <RadzenLabel class="formLabelTextCreateProject" Text="Loading tags..."/>
            </div>
        </div>
    }
    else
    {
        <div class="row" style="margin-bottom: 48px">
            <div class="col-md-2 align-right">
                <RadzenLabel class="formLabelTextCreateProject" Text="Tags"/>
                @if (_missingTagsName.Any())
                {
                    <div style="color: #f9777f; font-size: 0.85rem; margin-top: 10px">
                        
                        <p>Required tags missing:</p>

                        @foreach (var missingTag in _missingTagsName)
                        {
                            <p>@missingTag</p>

                        }
                    </div>
                }
            </div>
            <div class="col">
                @foreach (var tg in TagGroups)
                {
                    @if (!tg.SupervisorCanAddTag && tg.TagDTOs.Any())
                    {
                        <h5 class="tagCheckItemTitle">@tg.Name</h5>
                        @if (tg.TagDTOs.Count() <= 5)
                        {
                            <RadzenCheckBoxList class="tagCheckItem" style="margin-bottom: 20px" @bind-Value="@SelectedTags[tg.Id]" TValue="int">
                                <Items>
                                    @foreach (var tag in tg.TagDTOs)
                                    {
                                        <RadzenCheckBoxListItem Style="min-width: 160px; max-width: 160px" Text=@tag.Value Value=@tag.Id/>
                                    }
                                </Items>
                            </RadzenCheckBoxList>
                        }
                        else
                        {
                            <RadzenListBox class="tagCheckItem tagDropDown"
                                Data=@tg.TagDTOs
                                AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                Multiple="true"
                                @bind-Value="@SelectedTags[tg.Id]"
                                TextProperty="Name"
                                ValueProperty="Id">
                            </RadzenListBox>
                        }
                    }
                    else if (tg.SupervisorCanAddTag && tg.TagDTOs.Any())
                    {
                        <h5 class="tagCheckItemTitle">@tg.Name</h5>
                        <Autocomplete class="autocompleteTags tagCheckItem" Style="max-width: 40%"
                                      TItem="TagDTO"
                                      TValue="TagDTO"
                                      Data="tg.TagDTOs"
                                      TextField="@((item) => item.Value)"
                                      ValueField="@((item) => item)"
                                      Placeholder="Search or press enter to create new..."
                                      Multiple
                                      FreeTyping
                                      @bind-SelectedValues="_multipleSelectionTagsData[tg.Id]"
                                      @bind-SelectedTexts="_multipleSelectionTagsText[tg.Id]">
                        </Autocomplete>
                    }
                }
            </div>
        </div>
    }
</div>

<div class="row lowerSubmitCancelButtons">
    <div class="col-md-2 align-right"></div>
    <div class="col">
        <RadzenButton class="submitButton" form="@_submitFormId" ButtonType="Radzen.ButtonType.Submit" Text="Submit"></RadzenButton>
        <RadzenButton class="cancelButton" Click="@Cancel" Text="Cancel" ButtonStyle="ButtonStyle.Light"/>
    </div>
</div>


@code {
    private ProjectCreateDTO _project = new();

    private IEnumerable<TagGroupDTO> TagGroups { get; set; } = new List<TagGroupDTO>();
    private Dictionary<int, TagGroupDTO> RequiredTagGroups { get; set; } = new Dictionary<int, TagGroupDTO>();

    private IEnumerable<UserDTO> Supervisors { get; set; } = new List<UserDTO>();

    private Dictionary<int, IEnumerable<int>> SelectedTags = new();
    private IEnumerable<int> SelectedSupervisorIds { get; set; } // cannot be inside _project because we need enumerable and not set

    Dictionary<int, List<TagDTO>> _multipleSelectionTagsData = new(); // todo: skal nok mest bruges på update
    Dictionary<int, List<string>> _multipleSelectionTagsText = new();

    private string _submitFormId = "submitForm";
    private IEnumerable<string> _missingTagsName = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        TagGroups = await _http.GetFromJsonAsync<IReadOnlyCollection<TagGroupDTO>>("api/TagGroup");
        
        foreach (var tg in TagGroups)
        {
            _multipleSelectionTagsData[tg.Id] = new List<TagDTO>();
            _multipleSelectionTagsText[tg.Id] = new List<string>();
            SelectedTags.Add(tg.Id, new List<int>());
            if (tg.RequiredInProject) RequiredTagGroups.Add(tg.Id, tg);
        }
        
        // TODO: Fetch Supervisors from API.
        // TODO: Automatically add current user to SupervisorIds.
        //Supervisors = Supervisor.SampleSupervisors;
        Supervisors = await _http.GetFromJsonAsync<IReadOnlyCollection<UserDTO>>("api/User/roles/supervisor"); //Todo fraskil at man kan finde alle users, så vi kun kan finde supervisors

        _project.UserIds = new HashSet<int>();
        await base.OnInitializedAsync();
    }

    private IEnumerable<string> CheckRequiredTags()
    {
        return (from tg in RequiredTagGroups where !SelectedTags[tg.Key].Any() select tg.Value.Name).ToList();
    }

    void OnInvalidSubmit()
    {
        _missingTagsName = CheckRequiredTags();
    }

    private async void OnSubmit()
    {
        _missingTagsName = CheckRequiredTags();

        if (!_missingTagsName.Any())
        {
            var response = await _http.PostAsJsonAsync("api/Project", _project);
            if (response.IsSuccessStatusCode)
            {
                _navigationManager.NavigateTo($"{_navigationManager.BaseUri}");
            }
        }
    }

    void Cancel()
    {
        _navigationManager.NavigateTo($"{_navigationManager.BaseUri}supervisorOverview");
    }

}