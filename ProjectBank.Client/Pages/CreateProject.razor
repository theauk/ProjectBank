@page "/projectCreation"
@inject HttpClient _http
@inject NavigationManager _navigationManager
@using Microsoft.AspNetCore.Authorization
@using static ProjectBank.Core.Roles
@using System.Net
@attribute [Authorize(Roles = $"{Admin}, {Supervisor}")]
@inject IJSRuntime _jsRuntime

<PageTitle>Create Project</PageTitle>

<h1 style="margin-bottom: 48px">Create Project</h1>

@if (_response is { StatusCode: HttpStatusCode.BadRequest })
{
    <h2>Something went wrong, please try again!</h2>
}

<RadzenTemplateForm TItem="ProjectCreateDTO" Data="@_project" Submit="@OnSubmit" InvalidSubmit="OnInvalidSubmit"
    id="@_submitFormId">
    <div class="row" style="margin-bottom: 48px">
        <div class="col-md-2 align-right">
            <RadzenLabel class="formLabelTextCreateProject" Text="Name" />
            <p class="requiredText">Required</p>
        </div>
        <div class="col">
            <RadzenTextBox style="display: block; width: 50%;" Name="ProjectName" @bind-Value="@_project.Name" />
            <RadzenRequiredValidator Component="ProjectName" Text="Project name is required" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 48px">
        <div class="col-md-2 align-right">
            <RadzenLabel class="formLabelTextCreateProject" Text="Description" />
            <p class="requiredText">Required</p>
        </div>
        <div class="col">
            <RadzenTextArea style="display: block; width: 50%; height: 100px" Name="ProjectDescription"
                @bind-Value="@_project.Description"></RadzenTextArea>
            <RadzenRequiredValidator Component="ProjectDescription" Text="Description is required" />
        </div>
    </div>
    <div class="row supervisors" style="margin-bottom: 48px">
        <div class="col-md-2">
            <RadzenLabel class="formLabelTextCreateProject" Text="Co-Supervisors" />
        </div>
        <div class="col">
            <RadzenListBox class="tagDropDown" @bind-Value="@SelectedSupervisorIds" AllowFiltering="true"
                Multiple="true" Data="@Supervisors" TextProperty="Name" ValueProperty="Id" />
        </div>
    </div>
</RadzenTemplateForm>
<div>
    @if (!_loaded)
    {
        <div class="row" style="margin-bottom: 48px">
            <div class="col-md-2 align-right">
                <RadzenLabel class="formLabelTextCreateProject" Text="Loading tags..." />
            </div>
        </div>
    }
    else
    {
        @if (TagGroups.Any())
        {
            <div class="row" style="margin-bottom: 48px">
                <div class="col-md-2 align-right">
                    <RadzenLabel class="formLabelTextCreateProject" Text="Tags" />
                    @if (_missingTagsName.Any())
                    {
                        <div class="missingRequiredTags">
                            <p>Required tags missing:</p>

                            @foreach (var missingTag in _missingTagsName)
                            {
                                <p>@missingTag</p>
                            }
                        </div>
                    }
                </div>
                <div class="col">

                    @foreach (var tg in TagGroups)
                    {
                        @if (!tg.SupervisorCanAddTag)
                        {
                            <h5 class="tagCheckItemTitle">@tg.Name</h5>
                            @if (tg.RequiredInProject)
                            {
                                <p class="requiredText">Required</p>
                            }
                            @if (tg.TagDTOs.Count() <= 6)
                            {
                                <RadzenCheckBoxList @bind-Value="@_selectedPredefinedOnlyTagsId[tg.Id]" TValue="int"
                Orientation="Radzen.Orientation.Vertical" Data="@tg.TagDTOs" TextProperty="Value" ValueProperty="Id" />
                            }
                            else
                            {
                                <RadzenListBox class="tagCheckItem tagDropDown" Data=@tg.TagDTOs AllowFiltering="true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple="true"
                @bind-Value="@_selectedPredefinedOnlyTagsId[tg.Id]" TextProperty="Value" ValueProperty="Id">
                                </RadzenListBox>
                            }
                        }
                        else if (tg.SupervisorCanAddTag && tg.TagDTOs.Any())
                        {
                            <h5 class="tagCheckItemTitle">@tg.Name</h5>
                            @if (tg.RequiredInProject)
                            {
                                <p class="requiredText">Required</p>
                            }
                            <Autocomplete class="autocompleteTags tagCheckItem" Style="max-width: 40%" TItem="TagDTO" TValue="string"
                Data="tg.TagDTOs" TextField="@((item) => item.Value)" ValueField="@((item) => item.Value)"
                Placeholder="Search or press enter to create new..." Multiple FreeTyping
                @bind-SelectedValues="_selectedExistingTagsValues[tg.Id]"
                @bind-SelectedTexts="_allSelectedTagsValues[tg.Id]">
                            </Autocomplete>
                        }
                    }
                </div>
            </div>
        }
    }
</div>

<div class="row lowerSubmitCancelButtons">
    <div class="col-md-2 align-right"></div>
    <div class="col">
        <RadzenButton class="submitButton" form="@_submitFormId" ButtonType="Radzen.ButtonType.Submit" Text="Submit">
        </RadzenButton>
        <RadzenButton class="cancelButton" Click="@Cancel" Text="Cancel" ButtonStyle="ButtonStyle.Light" />
    </div>
</div>


@code {
    private bool _loaded;
    Dictionary<int, IEnumerable<int>> _selectedPredefinedOnlyTagsId = new();
    private ProjectCreateDTO _project = new();

    private IEnumerable<TagGroupDTO> TagGroups { get; set; } = new List<TagGroupDTO>();
    private Dictionary<int, TagGroupDTO> RequiredTagGroups { get; init; } = new Dictionary<int, TagGroupDTO>();

    private IEnumerable<UserDTO> Supervisors { get; set; } = new List<UserDTO>();

    private IEnumerable<int> SelectedSupervisorIds { get; set; } = new List<int>(); // cannot be inside _project because we need enumerable and not set

    private Dictionary<int, List<string>> _selectedExistingTagsValues = new();
    private Dictionary<int, List<string>> _allSelectedTagsValues = new();

    private string _submitFormId = "submitForm";
    private IEnumerable<string> _missingTagsName = new List<string>();

    private HttpResponseMessage? _response;

    protected override async Task OnInitializedAsync()
    {
        TagGroups = await _http.GetFromJsonAsync<IReadOnlyCollection<TagGroupDTO>>("api/TagGroup") ?? new List<TagGroupDTO>();

        var parameters = new List<string>();
        parameters.Add(string.Join("&", $"roles={Admin}"));
        parameters.Add(string.Join("&", $"roles={Supervisor}"));
        Supervisors = await _http.GetFromJsonAsync<IReadOnlyCollection<UserDTO>>("api/User/roles?" + string.Join("&", parameters)) ?? new List<UserDTO>();
        Console.WriteLine(string.Join("&", parameters));
        foreach (var tg in TagGroups)
        {
            if (tg.SupervisorCanAddTag)
            {
                _selectedExistingTagsValues[tg.Id] = new List<string>();
                _allSelectedTagsValues[tg.Id] = new List<string>();
            }
            else
            {
                _selectedPredefinedOnlyTagsId.Add(tg.Id, new List<int>());
            }

            if (tg.RequiredInProject) RequiredTagGroups.Add(tg.Id, tg);
        }

        _project.UserIds = new HashSet<int>();
        await base.OnInitializedAsync();
        _loaded = true;
    }

    private IEnumerable<string> CheckRequiredTags()
    {
        var list = new List<string>();
        foreach (var (tagGroupId, tagGroupDto) in RequiredTagGroups)
        {
            if (_allSelectedTagsValues.ContainsKey(tagGroupId))
            {
                if (!_allSelectedTagsValues[tagGroupId].Any()) list.Add(tagGroupDto.Name);
            }
            else if (_selectedPredefinedOnlyTagsId.ContainsKey(tagGroupId))
            {
                if (!_selectedPredefinedOnlyTagsId[tagGroupId].Any()) list.Add(tagGroupDto.Name);
            }
        }

        return list;
    }

    async void OnInvalidSubmit()
    {
        _missingTagsName = CheckRequiredTags();
        await _jsRuntime.InvokeVoidAsync("scrollToTop");
    }

    private async void OnSubmit()
    {
        _missingTagsName = CheckRequiredTags();
        if (!_missingTagsName.Any())
        {
            AddTags();
            _response = await _http.PostAsJsonAsync("api/Project", _project);
            if (_response.IsSuccessStatusCode) _navigationManager.NavigateTo($"{_navigationManager.BaseUri}");
        }
        else
        {
            await _jsRuntime.InvokeVoidAsync("scrollToTop");
        }
    }

    void AddTags()
    {
        // New tags
        foreach (var (tagGroupId, tagNames) in _allSelectedTagsValues)
        {
            var list = tagNames.Except(_selectedExistingTagsValues[tagGroupId]);
            _project.NewTagDTOs.UnionWith(list.Select(t => new TagCreateDTO { TagGroupId = tagGroupId, Value = t }).ToHashSet());
        }

        // Existing tags
        foreach (var list in _selectedPredefinedOnlyTagsId)
        {
            _project.ExistingTagIds.UnionWith(list.Value.ToHashSet());
        }
        _project.UserIds = SelectedSupervisorIds.ToHashSet();

        foreach (var tagDto in from tgIdStringTags in _selectedExistingTagsValues
                               from tagGroupDto in TagGroups
                               where tgIdStringTags.Key == tagGroupDto.Id
                               from val in tgIdStringTags.Value
                               select tagGroupDto.TagDTOs.FirstOrDefault(t => t.Value.Equals(val))
        into tagDto
                               where tagDto != null
                               select tagDto)
        {
            _project.ExistingTagIds.Add(tagDto.Id);
        }
    }

    void Cancel()
    {
        _navigationManager.NavigateTo($"{_navigationManager.BaseUri}supervisorOverview");
    }

}