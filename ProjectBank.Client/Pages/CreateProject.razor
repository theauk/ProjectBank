@page "/create"
@inject HttpClient Http

<PageTitle>Create Project Page</PageTitle>

<div class="CreateProjectContainer">
    <h3 style="text-align: center">Title</h3>
    <RadzenTextBox class="ProjectTitle" Change=@(args => Name = args) />
    <h3 style="text-align: center">Description</h3>
    <RadzenTextArea class="ProjectTitle" Change=@(args => Description = args) />
    @if (TagGroups.Count() == 0)
    {
        <h3 style="text-align: center">Loading tags...</h3>
    }
    else
    {
        foreach (var tg in TagGroups)
        {
            <div class="CreateTagContainer">
                <h4 style="text-align: center">@tg.Name</h4>
                @if (tg.Tags.Count() <= 8)
                {
                    <RadzenCheckBoxList @bind-Value=@SelectedTags[tg.Id] TValue="int">
                        <Items>
                            @foreach (var tag in tg.Tags)
                            {
                                <RadzenCheckBoxListItem Text=@tag.Name Value=@tag.Id />
                            }
                        </Items>
                    </RadzenCheckBoxList>
                }
                else
                {
                    <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple="true"
                        @bind-Value=@SelectedTags[tg.Id] Data=@tg.Tags TextProperty="Name" ValueProperty="Id" style="height: 200px; width: 30%; margin-right: 35%; margin-left: 35%;"/>
                }
            </div>
        }
        <h4 style="text-align: center">Supervisors</h4>
        <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple="true"
            @bind-Value=@SupervisorIds Data=@Supervisors TextProperty="Name" ValueProperty="Id" Style="height: 200px;width: 30%; margin-left:35%; margin-right: 35%;"/>
    }
    <RadzenButton Click=@Submit Text="Publish" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
    </div>

@code {
    private IEnumerable<TagGroup> TagGroups { get; set; } = new List<TagGroup>();
    private IEnumerable<Supervisor> Supervisors { get; set; } = new List<Supervisor>();
    private Dictionary<int, IEnumerable<int>> SelectedTags = new();

    private string Name { get; set; } = "";
    private string Description { get; set; } = "";
    private ISet<int> TagIds => SelectedTags.Aggregate(
        new HashSet<int>(),
        (collection, item) => collection.Concat(item.Value).ToHashSet()
    );
    private IEnumerable<int> SupervisorIds { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // TODO: Fetch TagGroups from API.
        //TagGroups = await Http.GetFromJsonAsync<TagGroupDTO>("api/Project");
        TagGroups = TagGroup.SampleTagGroups;

        foreach (var tg in TagGroups)
            SelectedTags.Add(tg.Id, new List<int>());

        // TODO: Fetch Supervisors from API.
        Supervisors = Supervisor.SampleSupervisors;
        // TODO: Automatically add current user to SupervisorIds.
    }

    private async void Submit()
    {
        ProjectCreateDTO project = new()
        {
            Name = Name,
            Description = Description,
            ExistingTagIds = TagIds,
            NewTagDTOs = new HashSet<TagCreateDTO>(), //TODO: Skal opdateres med eventualle nye tags
            UserIds = SupervisorIds.ToHashSet(),
        };

        await Http.PostAsJsonAsync("api/Project", project);
        // TODO: Redirect user to new Project Page.
    }

    // TODO: Limit amount of tags chosen, accoring to TagGroup MaxCount.
}
