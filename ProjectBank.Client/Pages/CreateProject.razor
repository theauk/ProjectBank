@page "/projectCreation"
@inject HttpClient _http
@inject NavigationManager _navigationManager
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin, Supervisor")]
@inject IJSRuntime JsRuntime

<PageTitle>Create Project</PageTitle>

<h1 style="margin-bottom: 48px">Create Project</h1>

<RadzenTemplateForm TItem="ProjectCreateDTO" Data="@_project" Submit="@OnSubmit" InvalidSubmit="OnInvalidSubmit" id="@_submitFormId">
    <div class="row" style="margin-bottom: 48px">
        <div class="col-md-2 align-right">
            <RadzenLabel class="formLabelTextCreateProject" Text="Name"/>
        </div>
        <div class="col">
            <RadzenTextBox style="display: block; width: 50%;" Name="ProjectName" @bind-Value="@_project.Name"/>
            <RadzenRequiredValidator Component="ProjectName" Text="Project name is required"/>
        </div>
    </div>
    <div class="row" style="margin-bottom: 48px">
        <div class="col-md-2 align-right">
            <RadzenLabel class="formLabelTextCreateProject" Text="Description"/>
        </div>
        <div class="col">
            <RadzenTextArea style="display: block; width: 50%; height: 100px" Name="ProjectDescription" @bind-Value="@_project.Description"></RadzenTextArea>
            <RadzenRequiredValidator Component="ProjectDescription" Text="Description is required"/>
        </div>
    </div>
    <div class="row supervisors" style="margin-bottom: 48px">
        <div class="col-md-2">
            <RadzenLabel class="formLabelTextCreateProject" Text="Co-Supervisors"/>
        </div>
        <div class="col">
            <RadzenListBox class="tagDropDown"
                @bind-Value="@SelectedSupervisorIds"
                AllowFiltering="true"
                Multiple="true"
                Data="@Supervisors"
                TextProperty="Name"
                ValueProperty="Id"/>
        </div>
    </div>
</RadzenTemplateForm>
<div>
    @if (!TagGroups.Any())
    {
        <div class="row" style="margin-bottom: 48px">
            <div class="col-md-2 align-right">
                <RadzenLabel class="formLabelTextCreateProject" Text="Loading tags..."/>
            </div>
        </div>
    }
    else
    {
        <div class="row" style="margin-bottom: 48px">
            <div class="col-md-2 align-right">
                <RadzenLabel class="formLabelTextCreateProject" Text="Tags"/>
                @if (_missingTagsName.Any())
                {
                    <div style="color: #f9777f; font-size: 0.85rem; margin-top: 10px">
                        
                        <p>Required tags missing:</p>

                        @foreach (var missingTag in _missingTagsName)
                        {
                            <p>@missingTag</p>

                        }
                    </div>
                }
            </div>
            <div class="col">
            
                @foreach (var tg in TagGroups)
                {
                    @if (!tg.SupervisorCanAddTag)
                    {
                        <h5 class="tagCheckItemTitle">@tg.Name</h5>
                        @if (tg.TagDTOs.Count() <= 0) {
                                
                            <RadzenCheckBoxList @bind-Value="@_selectedPredefinedOnlyTagsId" 
                                                TValue="int" 
                                                Orientation="Radzen.Orientation.Vertical"
                                                Data="@tg.TagDTOs" 
                                                TextProperty="Value" 
                                                ValueProperty="Id"
                                                Change=@(args => OnChange(args, "CheckBoxList with items from data"))/>
                        }
                        else
                        {
                            <RadzenListBox class="tagCheckItem tagDropDown"
                                Data=@tg.TagDTOs
                                AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                Multiple="true"
                                @bind-Value="@_selectedPredefinedOnlyTagsId"
                                TextProperty="Value"
                                ValueProperty="Id"
                                Change=@(args => OnChange2(args, "ListBox with multiple selection")) 
                                >
                            </RadzenListBox>
                        }
                    }
                    else if (tg.SupervisorCanAddTag && tg.TagDTOs.Any())
                    {
                        <h5 class="tagCheckItemTitle">@tg.Name</h5>
                        <Autocomplete class="autocompleteTags tagCheckItem" Style="max-width: 40%"
                                      TItem="TagDTO"
                                      TValue="string"
                                      Data="tg.TagDTOs"
                                      TextField="@((item) => item.Value)"
                                      ValueField="@((item) => item.Value)"
                                      Placeholder="Search or press enter to create new..."
                                      Multiple
                                      FreeTyping
                                      @bind-SelectedValues="_selectedExistingTagsValues[tg.Id]"
                                      @bind-SelectedTexts="_allSelectedTagsValues[tg.Id]">
                        </Autocomplete>
                    }
                }
            </div>
        </div>
    }
</div>

<div class="row lowerSubmitCancelButtons">
    <div class="col-md-2 align-right"></div>
    <div class="col">
        <RadzenButton class="submitButton" form="@_submitFormId" ButtonType="Radzen.ButtonType.Submit" Text="Submit"></RadzenButton>
        <RadzenButton class="cancelButton" Click="@Cancel" Text="Cancel" ButtonStyle="ButtonStyle.Light"/>
    </div>
</div>


@code {

    IEnumerable<int> _selectedPredefinedOnlyTagsId = new int[] {};


    private ProjectCreateDTO _project = new();

    private IEnumerable<TagGroupDTO> TagGroups { get; set; } = new List<TagGroupDTO>();
    private Dictionary<int, TagGroupDTO> RequiredTagGroups { get; set; } = new Dictionary<int, TagGroupDTO>();

    private IEnumerable<UserDTO> Supervisors { get; set; } = new List<UserDTO>();

    private IEnumerable<int> SelectedSupervisorIds { get; set; } = new List<int>(); // cannot be inside _project because we need enumerable and not set

    private Dictionary<int, List<string>> _selectedExistingTagsValues = new();
    private Dictionary<int, List<string>> _allSelectedTagsValues = new();

    private string _submitFormId = "submitForm";
    private IEnumerable<string> _missingTagsName = new List<string>();

    protected override async Task OnInitializedAsync()
    {
    //TagGroups = await _http.GetFromJsonAsync<IReadOnlyCollection<TagGroupDTO>>("api/TagGroup");

        TagGroupDTO t = new TagGroupDTO
        {
            Name = "The Name",
            Id = 99,
            RequiredInProject = true,
            SupervisorCanAddTag = true,
            TagDTOs = new HashSet<TagDTO> {new TagDTO {Id = 109, TagGroupId = 99, Value = "this"}}
        };
        TagGroupDTO t2 = new TagGroupDTO
        {
            Name = "The Checkbox",
            Id = 88,
            RequiredInProject = true,
            SupervisorCanAddTag = false,
            TagDTOs = new HashSet<TagDTO> {new TagDTO {Id = 110, TagGroupId = 99, Value = "Checkbox"}, new TagDTO {Id = 101, TagGroupId = 88, Value = "Checkbox2"}}
        };
        TagGroups = new List<TagGroupDTO> {t, t2};
        foreach (var tg in TagGroups)
        {
            _allSelectedTagsValues.Add(tg.Id, new List<string>());
            _selectedExistingTagsValues.Add(tg.Id, new List<string>());
            if (tg.RequiredInProject) RequiredTagGroups.Add(tg.Id, tg);
        }

    // TODO: Fetch Supervisors from API.
    // TODO: Automatically add current user to SupervisorIds.
    //Supervisors = Supervisor.SampleSupervisors;
    //Supervisors = await _http.GetFromJsonAsync<IReadOnlyCollection<UserDTO>>("api/User/roles/supervisor"); //Todo fraskil at man kan finde alle users, så vi kun kan finde supervisors

        _project.UserIds = new HashSet<int>();
        await base.OnInitializedAsync();
    }

    private IEnumerable<string> CheckRequiredTags()
    {
        return (from tg in RequiredTagGroups where !_allSelectedTagsValues[tg.Key].Any() select tg.Value.Name).ToList();
    }

    async void OnInvalidSubmit()
    {
        _missingTagsName = CheckRequiredTags();
        await JsRuntime.InvokeVoidAsync("scrollToTop");
    }

    private async void OnSubmit()
    {
        _missingTagsName = CheckRequiredTags();
        Console.WriteLine();

        if (true)
        {
            
            AddTags();
    
            Console.WriteLine("Submit project: " + _project);
            Console.WriteLine("Submit project w/ existing " + _project.ExistingTagIds.Count() + " tags IDS: ");
            foreach (var VARIABLE in _project.ExistingTagIds)
            {
                Console.WriteLine(VARIABLE + ", ");
            }

            Console.WriteLine("Submit project w/ new " + _project.NewTagDTOs.Count() + " tags VALUES: ");
            foreach (var VARIABLE in _project.NewTagDTOs)
            {
                Console.WriteLine(VARIABLE + ", ");
            }


            var response = await _http.PostAsJsonAsync("api/Project", _project);
            if (response.IsSuccessStatusCode)
            {
                _navigationManager.NavigateTo($"{_navigationManager.BaseUri}");
            }
            else
            {
                Console.WriteLine("Nested else");
                await JsRuntime.InvokeVoidAsync("scrollToTop");
            }
        }
        else
        {
            Console.WriteLine("Outside else");
            await JsRuntime.InvokeVoidAsync("scrollToTop");
        }
    }

    void AddTags()
    {
        // New tags
        foreach (var keyvalue in _allSelectedTagsValues)
        {
            var list = keyvalue.Value.Except(_selectedExistingTagsValues[keyvalue.Key]);
            _project.NewTagDTOs.UnionWith(list.Select(t => new TagCreateDTO {TagGroupId = keyvalue.Key, Value = t}).ToHashSet());
        }
        // existing tags
        _project.ExistingTagIds.UnionWith(_selectedPredefinedOnlyTagsId.ToHashSet());
        _project.UserIds = SelectedSupervisorIds.ToHashSet();

        foreach (var tagDto in from tgID_StringTags in _selectedExistingTagsValues 
            from tagGroupDto in TagGroups 
            where tgID_StringTags.Key == tagGroupDto.Id 
            from val in tgID_StringTags.Value 
            select tagGroupDto.TagDTOs.FirstOrDefault(t => t.Value.Equals(val)) 
            into tagDto 
            where tagDto != null select tagDto)
        {
            _project.ExistingTagIds.Add(tagDto.Id);
        }
        
    }

    void Cancel()
    {
        _navigationManager.NavigateTo($"{_navigationManager.BaseUri}supervisorOverview");
    }

    
    void OnChange(IEnumerable<int> value, string name)
    {
        Console.WriteLine($"{name} value changed to {string.Join(", ", value)}");
    }
    
    void OnChange2(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        Console.WriteLine($"{name} value changed to {str}");
    }

}