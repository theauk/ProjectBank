@page "/"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin, Supervisor, Student")]
@inject HttpClient _http
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

<PageTitle>Landing Page</PageTitle>

<div class="ProjectContainer">

    <div class="ProjectList">
    <h1>Projects</h1>
        @if (!_loaded)
        {
            <p>Loading...</p>
        }
        else if (!_projects.Any())
        {
            <p>No results</p>
        }
        else
        {
            @foreach (var p in _projects)
            {
                <div class="ProjectEntry">
                    <a href="index/@p.Id">
                        <h2>@p.Id: @p.Name</h2>
                        <p style="text-align: right">@String.Join(", ", p.Tags.Select(t => t.Value))</p>
                    </a>
                </div>
            }
        }
    </div>
    <div class="FilterContainer">
        <h1>Filter</h1>
        <div class="TagFilter">
            @if (!_tagGroups.Any())
            {
                <p>Loading Filter...</p>
            }
            else
            {
                @foreach (var tg in _tagGroups)
                {
                    <RadzenFieldset AllowCollapse="true" Collapsed="true" class="TagFieldSet">
                        <HeaderTemplate>
                            <span style="vertical-align: middle">
                                <b class="TagFieldTitle">@tg.Name.ToUpper()</b>
                            </span>
                        </HeaderTemplate>
                        <ChildContent>
                            @if (tg.TagDTOs.Count() <= 8)
                            {
                                <RadzenCheckBoxList @bind-Value=@_selectedTagsOfTagGroup[tg.Id] TValue="int" Orientation="Radzen.Orientation.Vertical" Change=@ApplyFilter>
                                    <Items>
                                        @foreach (var t in tg.TagDTOs)
                                        {
                                            <RadzenCheckBoxListItem Text=@t.Value Value=@t.Id />
                                        }
                                    </Items>
                                </RadzenCheckBoxList>
                            }
                            else
                            {
                                <RadzenDropDown AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            @bind-Value=@_selectedTagsOfTagGroup[tg.Id] Multiple="true" Placeholder="Select..."
                                            Data=@tg.TagDTOs TextProperty="Value" ValueProperty="Id" style="width: 100%;" Change=@ApplyFilter />
                            }
                        </ChildContent>
                    </RadzenFieldset>
                }
                <p>Selected tag IDs: @string.Join(", ", SelectedTags)</p>
            }
        </div>
    </div>
</div>


@code {
    private IEnumerable<ProjectDTO> _projects = new List<ProjectDTO>();
    private IEnumerable<TagGroupDTO> _tagGroups = new List<TagGroupDTO>();
    private IEnumerable<UserDTO> _supervisors = new List<UserDTO>();
    private Dictionary<int, IEnumerable<int>> _selectedTagsOfTagGroup = new Dictionary<int, IEnumerable<int>>();
    // All selected tags, across all TagGroups.
    private IEnumerable<int> SelectedTags => _selectedTagsOfTagGroup.Aggregate(
        new HashSet<int>(),
        (collection, item) => collection.Concat(item.Value).ToHashSet()
    );
    private IEnumerable<int> SelectedSupervisors = new List<int>(); //todo sæt den her i html
    
    private bool _loaded = false;

    protected override async Task OnInitializedAsync()
    {

        //Projects = Project.SampleProjects; //Lav rigtigt API kald når det er med ProjectBankContext
        _projects = await _http.GetFromJsonAsync<IReadOnlyCollection<ProjectDTO>>(
            "api/Project");
        _tagGroups = await _http.GetFromJsonAsync<IReadOnlyCollection<TagGroupDTO>>("api/TagGroup");
        string role = "supervisor"; //todo den her skal nok sættes et andet sted? -oli
        _supervisors = await _http.GetFromJsonAsync<IReadOnlyCollection<UserDTO>>($"api/User/{role}");
        //TODO Implementer Supervisors her også med _selectedSupervisors og det hele
        // Create a set of empty "selected" ids for each tag group.
        foreach (var tg in _tagGroups)
            _selectedTagsOfTagGroup.Add(tg.Id, new List<int>());
        
        _loaded = true;
    }

    private async Task ApplyFilter()
    {
        //Kode som sender API kald videre - Vi mangler API som kan håndtere Tag IDs
        _projects = await _http.GetFromJsonAsync<IReadOnlyCollection<ProjectDTO>>(
            "api/Project?" + string.Join("&", SelectedTags.Select(t => $"tagIds={t}")) + string.Join("&", SelectedSupervisors.Select(s => $"supervisorIds={s}"))); //todo hilfen mit filtering ples
    }
}
