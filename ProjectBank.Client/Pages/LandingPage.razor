@page "/"
@using Microsoft.AspNetCore.Authorization
@inject HttpClient _http
@attribute [Authorize(Roles = "Admin, Supervisor, Student")]

<PageTitle>Landing Page</PageTitle>

<div class="projectContainer">
    <div class="row" style="margin-bottom: 20px">
        <div class="col-md-3 align-right">
            <h1 class="landingPageTitle">Filter</h1>
            <div class="tagFilterContainer">
                @if (!_tagGroups.Any())
                {
                    <p>Loading Filters...</p>
                }
                else
                {
                    @foreach (var tg in _tagGroups)
                    {
                        <RadzenFieldset AllowCollapse="true" Collapsed="true" class="tagFieldSet">
                            <HeaderTemplate>
                                <b class="tagFieldTitle">@tg.Name.ToUpper()</b>
                            </HeaderTemplate>
                            <ChildContent>
                                @if (tg.TagDTOs.Count() <= 8)
                                {
                                    <RadzenCheckBoxList class="checkBoxList"
                                                        @bind-Value=@_selectedTagsOfTagGroup[tg.Id]
                                                        TValue="int" Orientation="Radzen.Orientation.Vertical"
                                                        Change=@ApplyFilter>
                                        <Items>
                                            @foreach (var t in tg.TagDTOs)
                                            {
                                                <RadzenCheckBoxListItem Text=@t.Value Value=@t.Id/>
                                            }
                                        </Items>
                                    </RadzenCheckBoxList>
                                }
                                else
                                {
                                    <RadzenDropDown AllowFiltering="true"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@_selectedTagsOfTagGroup[tg.Id]
                                                    Multiple="true"
                                                    Placeholder="Select..."
                                                    Data=@tg.TagDTOs
                                                    TextProperty="Value"
                                                    ValueProperty="Id"
                                                    style="width: 100%;"
                                                    Change=@ApplyFilter/>
                                }
                            </ChildContent>
                        </RadzenFieldset>
                    }
                    <RadzenFieldset AllowCollapse="true" Collapsed="true" class="tagFieldSet">
                        <HeaderTemplate>
                            <b class="tagFieldTitle">SUPERVISORS</b>
                        </HeaderTemplate>
                        <ChildContent>
                            <RadzenDropDown AllowFiltering="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            @bind-Value=@_selectedSupervisors
                                            Multiple="true" Placeholder="Select..."
                                            Data=@_supervisors
                                            TextProperty="Name"
                                            ValueProperty="Id"
                                            style="width: 100%;"
                                            Change=@ApplyFilter />
                        </ChildContent>
                    </RadzenFieldset>
                }
            </div>

        </div>
        <div class="col">
            <h1 class="landingPageTitle">Projects</h1>
            <div class="projectList">
                @if (!_allProjects.Any())
                {
                    <p>Loading projects...</p>
                }
                else
                {
                    <RadzenDataList class="projectCardsFlex" WrapItems="true" AllowPaging="true" Data="@_visibleProjects" TItem="ProjectDTO">
                        <Template Context="project">
                            <RadzenCard Style="width:300px; margin: 0;">
                                <a href="index/@project.Id">
                                    <div class="projectEntryContent">
                                        <h4 class="mb-0 projectName">@project.Name</h4>
                                        <p class="matchingTags">"need to implement function that shows matching tags"</p>
                                    </div>
                                </a>
                            </RadzenCard>
                        </Template>
                    </RadzenDataList>
                    <RadzenPager class="landingPagePager" ShowPagingSummary="true" PagingSummaryFormat="@PagingSummaryFormat" Count="@_count" PageSize="@PageSize" PageChanged="@UpdateVisibleProjects"/>
                }
            </div>
        </div>
    </div>
</div>


@code {
    private const string PagingSummaryFormat = "Displaying page {0} of {1} (total {2} projects)";
    private const int PageSize = 10;
    int _count;
    
    private IEnumerable<ProjectDTO> _allProjects = new List<ProjectDTO>();
    private IEnumerable<ProjectDTO> _visibleProjects = new List<ProjectDTO>();
    
    private IEnumerable<TagGroupDTO> _tagGroups = new List<TagGroupDTO>();
    private Dictionary<int, IEnumerable<int>> _selectedTagsOfTagGroup = new();
    private HashSet<int> SelectedTags => _selectedTagsOfTagGroup.Aggregate( // ikke sikker på hvad den her er til
        new HashSet<int>(),
        (collection, item) => collection.Concat(item.Value).ToHashSet()
        );

    private IEnumerable<UserDTO> _supervisors = new List<UserDTO>();
    private IEnumerable<int> _selectedSupervisors = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        _supervisors = await _http.GetFromJsonAsync<IReadOnlyCollection<UserDTO>>("api/User/roles/supervisor") ?? new List<UserDTO>();
        
        _tagGroups = await _http.GetFromJsonAsync<IReadOnlyCollection<TagGroupDTO>>("api/TagGroup") ?? new List<TagGroupDTO>();
        if (_tagGroups.Any())
        {
            foreach (var tg in _tagGroups)
                _selectedTagsOfTagGroup.Add(tg.Id, new List<int>());
        }

        _allProjects = await _http.GetFromJsonAsync<IReadOnlyCollection<ProjectDTO>>("api/Project") ?? new List<ProjectDTO>();
        if (_allProjects.Any())
        {
            _count = _allProjects.Count();
            _visibleProjects = _allProjects.Skip(0).Take(PageSize).ToList();
            
        }
        
        await base.OnInitializedAsync();
    }

    void UpdateVisibleProjects(PagerEventArgs args)
    {
        _visibleProjects = _allProjects.Skip(args.Skip).Take(args.Top).ToList();
    }

    async Task ApplyFilter()
    {
        _allProjects = await _http.GetFromJsonAsync<IReadOnlyCollection<ProjectDTO>>(
            "api/Project?" + string.Join("&", SelectedTags.Select(t => $"tagIds={t}")) + "&" + string.Join("&", _selectedSupervisors.Select(s => $"supervisorIds={s}"))) ?? new List<ProjectDTO>(); //todo hilfen mit filtering ples
        if (_allProjects.Any())
        {
            _count = _allProjects.Count();
            _visibleProjects =  _allProjects.Skip(0).Take(PageSize).ToList();
        }
    }

}