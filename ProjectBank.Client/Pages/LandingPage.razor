@page "/"
@using Microsoft.AspNetCore.Authorization
@using static ProjectBank.Core.Roles
@inject HttpClient _http
@attribute [Authorize(Roles = $"{Admin}, {Supervisor}, {Student}")]

<PageTitle>Landing Page</PageTitle>

<div class="projectContainer">
    <div class="row" style="margin-bottom: 20px">
        <div class="col-md-3 align-right">
            <h1 class="landingPageTitle">Filter</h1>
            <div class="tagFilterContainer">
                @if (!_loaded)
                {
                    <p>Loading Filters...</p>
                }
                else
                {
                    if (_tagGroups.Any())
                    {
                        @foreach (var tg in _tagGroups)
                        {
                            if (tg.TagDTOs.Any())
                            {
                                <RadzenFieldset AllowCollapse="true" Collapsed="true" class="tagFieldSet">
                                    <HeaderTemplate>
                                        <b class="tagFieldTitle">@tg.Name.ToUpper()</b>
                                    </HeaderTemplate>
                                    <ChildContent>
                                        @if (tg.TagDTOs.Count() <= 6)
                                        {
                                            <RadzenCheckBoxList class="checkBoxList" @bind-Value=@_selectedTagsOfTagGroup[tg.Id]
                            TValue="int" Orientation="Radzen.Orientation.Vertical" Change=@ApplyFilter>
                                                <Items>
                                                    @foreach (var t in tg.TagDTOs)
                                                    {
                                                        <RadzenCheckBoxListItem Text=@t.Value Value=@t.Id />
                                                    }
                                                </Items>
                                            </RadzenCheckBoxList>
                                        }
                                        else
                                        {
                                            <RadzenDropDown AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value=@_selectedTagsOfTagGroup[tg.Id] Multiple="true" Placeholder="Select..."
                            Data=@tg.TagDTOs TextProperty="Value" ValueProperty="Id" style="width: 100%;"
                            Change=@ApplyFilter />
                                        }
                                    </ChildContent>
                                </RadzenFieldset>
                            }
                        }
                    }
                    <RadzenFieldset AllowCollapse="true" Collapsed="true" class="tagFieldSet">
                        <HeaderTemplate>
                            <b class="tagFieldTitle">SUPERVISORS</b>
                        </HeaderTemplate>
                        <ChildContent>
                            <RadzenDropDown AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value=@_selectedSupervisors Multiple="true" Placeholder="Select..." Data=@_supervisors
                            TextProperty="Name" ValueProperty="Id" style="width: 100%;" Change=@ApplyFilter />
                        </ChildContent>
                    </RadzenFieldset>
                }
            </div>
        </div>
        <div class="col">
            <h1 class="landingPageTitle">Projects</h1>
            <div class="projectList">
                @if (!_loaded)
                {
                    <p>Loading projects...</p>
                }
                else if (!_allProjects.Any())
                {
                    <p>No projects found!</p>
                }
                else
                {
                    <RadzenDataList class="projectCardsFlex" WrapItems="true" AllowPaging="true" Data="@VisibleProjects"
                    TItem="ProjectDTO">
                        <Template Context="project">
                            <RadzenCard Style="width:300px; margin: 0;">
                                <a href="index/@project.Id">
                                    <div class="projectEntryContent">
                                        <h4 class="mb-0 projectName">@project.Name</h4>
                                        <p class="matchingTags">@string.Join(", ", @project.Tags.Select((t => t.Value)))</p>
                                    </div>
                                </a>
                            </RadzenCard>
                        </Template>
                    </RadzenDataList>
                    <RadzenPager class="landingPagePager" ShowPagingSummary="true"
                    PagingSummaryFormat="@PagingSummaryFormat" Count="@_count" PageSize="@PageSize"
                    PageChanged="@UpdateVisibleProjects" />
                }
            </div>
        </div>
    </div>
</div>


@code {
    private const string PagingSummaryFormat = "Displaying page {0} of {1} (total {2} projects)";
    private const int PageSize = 10;

    private int _count;
    private int _skip;
    private int _take = PageSize;
    private bool _loaded;

    private IEnumerable<ProjectDTO> _allProjects = new List<ProjectDTO>();
    private IEnumerable<ProjectDTO> VisibleProjects => _allProjects.Skip(_skip).Take(_take);

    private IEnumerable<TagGroupDTO> _tagGroups = new List<TagGroupDTO>();
    private Dictionary<int, IEnumerable<int>> _selectedTagsOfTagGroup = new();

    private HashSet<int> SelectedTags => _selectedTagsOfTagGroup.Aggregate(
        new HashSet<int>(),
        (collection, item) => collection.Concat(item.Value).ToHashSet()
    );

    private IEnumerable<UserDTO> _supervisors = new List<UserDTO>();
    private IEnumerable<int> _selectedSupervisors = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        _supervisors = await _http.GetFromJsonAsync<IReadOnlyCollection<UserDTO>>("api/User/filter") ?? new List<UserDTO>();
        _tagGroups = await _http.GetFromJsonAsync<IReadOnlyCollection<TagGroupDTO>>("api/TagGroup") ?? new List<TagGroupDTO>();

        if (_tagGroups.Any())
            foreach (var tg in _tagGroups)
                _selectedTagsOfTagGroup.Add(tg.Id, new List<int>());

        _allProjects = await _http.GetFromJsonAsync<IReadOnlyCollection<ProjectDTO>>("api/Project") ?? new List<ProjectDTO>();
        _count = _allProjects.Count();

        await base.OnInitializedAsync();
        _loaded = true;
    }

    void UpdateVisibleProjects(PagerEventArgs args)
    {
        _skip = args.Skip;
        _take = args.Top;
    }

    async Task ApplyFilter()
    {
        var parameters = new List<string>();
        if (SelectedTags.Any())
            parameters.Add(string.Join("&", SelectedTags.Select(t => $"tagIds={t}")));
        if (_selectedSupervisors.Any())
            parameters.Add(string.Join("&", _selectedSupervisors.Select(s => $"supervisorIds={s.ToString()}")));

        _allProjects = await _http.GetFromJsonAsync<IReadOnlyCollection<ProjectDTO>>(
            "api/Project?" + string.Join("&", parameters)
            ) ?? new List<ProjectDTO>();

        _skip = 0;
        _take = PageSize;
        _count = _allProjects.Count();
    }

}