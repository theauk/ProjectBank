@page "/admin"
@inject HttpClient _http
@inject NavigationManager _nav
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Admin Overview</PageTitle>

<div class="adminPageContainer">
    <div class="adminPageTopBar">
        <h1>Manage Tag Groups</h1>
        <div class="adminPageButtonContainer">
            <RadzenButton class="submitButton" Text="Save" Icon="save" Click="@Save"/>
            <RadzenButton class="cancelButton" Text="Cancel" Icon="highlight_off" ButtonStyle="ButtonStyle.Warning" Click="@Cancel"/>
        </div>
    </div>

    <div class="row tagGroupContainer" style="margin-bottom: 20px">
        <div class="col">
            @if (!_tagGroups.Any())
            {
                <p>Loading...</p>
            }
            else
            {
                <RadzenDataList class="tgCards" WrapItems="true" AllowPaging="true" Data="@_visibleTagGroups" TItem="TagGroupUpdateDTO">
                    <Template Context="tg">
                        <RadzenCard class="tgCard">
                            <RadzenFieldset class="tagGroupFieldSet" AllowCollapse="true" Collapsed="true">
                                <HeaderTemplate>
                                    @if (!_editingName[tg.Id])
                                    {
                                        <b class="tagFieldTitle" @ondblclick=@(_ => _editingName[tg.Id] = true)>@tg.Name</b>
                                    }
                                    else
                                    {
                                        <RadzenTextBox @bind-Value=@tg.Name Change=@(_ => { _editingName[tg.Id] = false; _edited[tg.Id] = true; })/>
                                    }
                                </HeaderTemplate>
                                <ChildContent>
                                    <div class="selectGrid">
                                        <div class="flex-row tagGroupSelections">
                                            <div class="tagGroupChecks">
                                                <div>
                                                    <RadzenCheckBox class="selectLeftItem" @bind-Value=@tg.RequiredInProject TValue="bool" Change=@(_ => _edited[tg.Id] = true) />
                                                    <RadzenLabel Text="Required"/>
                                                </div>
                                                <div>
                                                    <RadzenCheckBox class="selectLeftItem" @bind-Value=@tg.SupervisorCanAddTag TValue="bool" Change=@(_ => _edited[tg.Id] = true) />
                                                    <RadzenLabel Text="Supervisors can add tags"/>
                                                </div>
                                            </div>
                                            <div>
                                                <RadzenLabel class="selectLeftItem" Text="Maximum tags"/>
                                                <RadzenNumeric @bind-Value=@tg.TagLimit TValue="int?" Placeholder="No limit" Min="1" style="width: 200px" Change=@(_ => _edited[tg.Id] = true) />
                                            </div>
                                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Text="Delete Tag" Click=@(_ => RemoveTagGroup(tg)) />
                                        </div>
                                        <div class="adminPageTags">
                                            <Autocomplete class="autocompleteTags"
                                                          TItem="TagDTO"
                                                          TValue="int"
                                                          Data="@_tagGroups.First(t => t.Id == tg.Id).TagDTOs"
                                                          TextField="@((item) => item.Value)"
                                                          ValueField="@((item) => item.Id)"
                                                          Placeholder="Search or press enter to create new..."
                                                          Multiple
                                                          FreeTyping
                                                          @bind-SelectedValues="_multipleSelectionTagsData[tg.Id]"
                                                          @bind-SelectedTexts="_multipleSelectionTagsTexts[tg.Id]">
                                            </Autocomplete>
                                        </div>
                                    </div>
                                </ChildContent>
                            </RadzenFieldset>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
                <RadzenPager class="landingPagePager" ShowPagingSummary="true" PagingSummaryFormat="@PagingSummaryFormat" Count="@_count" PageSize="@PageSize" PageChanged="@UpdateVisibleTgs"/>
            }
        </div>
    </div>
</div>

@code {
        private const string PagingSummaryFormat = "Displaying page {0} of {1} (total {2} tag groups)";
        private const int PageSize = 5;
    int _count;
    int _lastSkip;
    int _lastTake;

    private IEnumerable<TagGroupDTO> _tagGroups = new List<TagGroupDTO>();
    private IEnumerable<TagGroupUpdateDTO> TagGroupsUpdateDtos { get; set; } = new List<TagGroupUpdateDTO>();
    private List<int> _deletedTgs = new();
    private IEnumerable<TagGroupUpdateDTO> _visibleTagGroups = new List<TagGroupUpdateDTO>();

    private Dictionary<int, bool> _edited = new();
    private Dictionary<int, bool> _editingName = new();

    Dictionary<int, List<int>> _multipleSelectionTagsData = new();
    //List<int> _multipleSelectionTagsData = new List<int>(); // TODO: for update â€“ might need ID instead of value. 
    Dictionary<int, List<string>> _multipleSelectionTagsTexts = new();

    protected override async Task OnInitializedAsync()
    {
        _edited.Add(-1, true);
        _editingName.Add(-1, true);

        //_tagGroups = await _http.GetFromJsonAsync<IReadOnlyCollection<TagGroupDTO>>("api/TagGroup") ?? new List<TagGroupDTO>();

        var tags = new HashSet<TagDTO>();
        tags.Add(new TagDTO() {Id = 1, TagGroupId = 1, Value = "SWU"});

        var tg1 = new TagGroupDTO {Id = 1, Name = "Programme", SupervisorCanAddTag = false, RequiredInProject = false, TagDTOs = tags, TagLimit = 1};
        var tg2 = new TagGroupDTO {Id = 2, Name = "Programme", SupervisorCanAddTag = false, RequiredInProject = false, TagDTOs = tags, TagLimit = 2};
        var tg3 = new TagGroupDTO {Id = 3, Name = "Programme", SupervisorCanAddTag = true, RequiredInProject = true, TagDTOs = tags, TagLimit = 3};
        var tg4 = new TagGroupDTO {Id = 4, Name = "Programme", SupervisorCanAddTag = true, RequiredInProject = false, TagDTOs = tags, TagLimit = 4};
        var tg5 = new TagGroupDTO {Id = 5, Name = "Programme", SupervisorCanAddTag = false, RequiredInProject = true, TagDTOs = tags, TagLimit = 5};
        var tg6 = new TagGroupDTO {Id = 6, Name = "Programme", SupervisorCanAddTag = false, RequiredInProject = true, TagDTOs = tags, TagLimit = 6};
        var tg7 = new TagGroupDTO {Id = 7, Name = "Programme", SupervisorCanAddTag = false, RequiredInProject = true, TagDTOs = tags, TagLimit = 7};
        var tg8 = new TagGroupDTO {Id = 8, Name = "Programme", SupervisorCanAddTag = false, RequiredInProject = true, TagDTOs = tags, TagLimit = 8};

        var tgs = new List<TagGroupDTO>();
        tgs.Add(tg1);
        tgs.Add(tg2);
        tgs.Add(tg3);
        tgs.Add(tg4);
        tgs.Add(tg5);
        tgs.Add(tg6);
        tgs.Add(tg7);
        tgs.Add(tg8);
        _tagGroups = tgs;
        
        foreach(var tg in _tagGroups)
        {
            _multipleSelectionTagsData[tg.Id] = tg.TagDTOs.Select(t => t.Id).ToList();
            _multipleSelectionTagsTexts[tg.Id] = tg.TagDTOs.Select(t => t.Value).ToList();
        }
        
        TagGroupsUpdateDtos = _tagGroups.Select(tg => tg.ToUpdateDTO()).ToList();

        foreach (var tg in TagGroupsUpdateDtos)
        {
            _edited.Add(tg.Id, false);
            _editingName.Add(tg.Id, false);
        }

        _count = TagGroupsUpdateDtos.Count();
        _visibleTagGroups = TagGroupsUpdateDtos.Skip(0).Take(PageSize).ToList();
        _lastSkip = 0;
        _lastTake = PageSize;

        await base.OnInitializedAsync();
    }

    void UpdateVisibleTgs(PagerEventArgs args)
    {
        _visibleTagGroups = TagGroupsUpdateDtos.Skip(args.Skip).Take(args.Top).ToList();
        _lastSkip = args.Skip;
        _lastTake = args.Top;
    }

    private async void Save()
    {
        foreach (var tg in TagGroupsUpdateDtos)
        if (tg.Id == -1) // todo: hvad er det her???
            await _http.PostAsJsonAsync("api/TagGroup", tg.Depress()); // todo: hvad er det her???
        else if (_edited[tg.Id])
            await _http.PutAsJsonAsync($"api/TagGroup/{tg.Id}", tg);

        foreach (var id in _deletedTgs)
            await _http.DeleteAsync($"api/TagGroup/{id}");

        _nav.NavigateTo(_nav.Uri, forceLoad: true);
    }

    private void Cancel()
    {
        _nav.NavigateTo($"{_nav.BaseUri}");
    }

    private async void RemoveTagGroup(TagGroupUpdateDTO tg)
    {
        _deletedTgs.Add(tg.Id);
        TagGroupsUpdateDtos = TagGroupsUpdateDtos.Where(t => t.Id != tg.Id).ToList();

        _visibleTagGroups = TagGroupsUpdateDtos.Skip(_lastSkip).Take(_lastTake).ToList();
        _count = TagGroupsUpdateDtos.Count();
    }

}